//here we will make the reducers for the store 
//we need only two method that will make a slice 
//previously we used the data to find the key so we need the nano id methods provided by redux which generated usique id


import { createSlice,nanoid } from "@reduxjs/toolkit";


//then we need to maka initial state of the store 
//it is just an object 
const initialState={
    todos:[]
}

//now we will make a slice , which is like a reducer functionality
export const todoSlice = createSlice({
    name:'todo', //this name is given by redux
    initialState,  //every slice has initial state
    reducers:{   //this is how we make a reducer which is a property it takes a properties and function(with defin this can be declared somewhere else )
        //we get two things one is state and other is action , state:abhi us state pe ky ky value
        //action:id hame milta hai sction se jab remove call karunga (what all things you have passed while calling the fucntion )
        addTodo : (state,action)=>{
            const todo={   //todo is an object 
                id:nanoid(),   //gives unique id to each todo
                text:action.payload,  //payload is object in itself, we can extract things inside it using the property and dot , we can extract anything form it 
            }
            state.todos.push(todo)   //here we are pushing the new todo into the state
        },  //this fucntion takes two parameter and this is the syntax , state gives us access to the initial vlaues of the state 
            removeTodo:(state,action)=>{ //now we know that state ke andar hame milta hau current state and action ke andar jo bhi data pass hora hai,
            //ab mujhe pata hai remove karne ke liye action me mujhe inhone aik id bheja hoga
            state.todos=state.todos.filter((todo)=>{ //modifyring the actual state.todos list 
              return  todo.id !== action.payload  //which all not matched it gets filtered out 
            })
        },   //action's are somethings the value might come to us so like remove(id) //id is required so action gives us the id's
    }
})  //to this just pass an object 
//now we need to keep the name of the slices , keep it caredfully
// The todoSlice.actions that you are exporting contains the action creators generated by the createSlice 
//function in Redux Toolkit. When you define reducers inside createSlice, 
//it automatically creates corresponding action creators for each reducer function.

// Hereâ€™s a more detailed breakdown of how this works:

// Define Initial State: You define the initial state of your slice.
// Create Slice: You use createSlice to create the slice, passing it an object with name, initialState, and reducers.
// Reducers: Inside the reducers property, you define the reducer functions. Each reducer
// function receives the current state and an action object.
// Actions: Redux Toolkit automatically generates action creators for each reducer function.
// These action creators are then available on the actions property of the slice.
//now in order to export it we need to export the fucntionlaity , 
export const {addTodo,removeTodo}=todoSlice.actions

//now we also need to provide the store the necessary idea of what all functionlaiyt it need to store
export default todoSlice.reducer   //go inside the store file and use this 


